{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","logo.png","components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","p","Navbar","react_default","a","createElement","className","href","target","rel","this","props","account","Component","Main","_this","onSubmit","event","preventDefault","name","productName","value","price","window","web3","utils","toWei","productPrice","toString","createProduct","type","ref","input","placeholder","required","scope","products","map","product","key","fromWei","owner","purchased","onClick","purchaseProduct","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","productCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","Marketplace","networks","abi","address","marketplace","Contract","methods","i","concat","toConsumableArray","_this2","send","from","once","receipt","_this3","components_Navbar","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.badb1683.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 333;","module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            University MarketPlace\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.props.account}</span></small>\n            </li>\n          </ul>\n        </nav> \n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Main extends Component {\n\n  render() {\n    return (\n        <div id=\"content\">\n        <h1>Add Product</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          const name = this.productName.value\n          const price = window.web3.utils.toWei(this.productPrice.value.toString(), 'Ether')\n          this.props.createProduct(name, price)\n        }}>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"productName\"\n              type=\"text\"\n              // to read from the form\n              ref={(input) => { this.productName = input }}\n              className=\"form-control\"\n              placeholder=\"Product Name\"\n              required />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"productPrice\"\n              type=\"text\"\n              ref={(input) => { this.productPrice = input }}\n              className=\"form-control\"\n              placeholder=\"Product Price\"\n              required />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">Add Product</button>\n        </form>\n        <p>&nbsp;</p>\n        <h2>Buy Product</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Price</th>\n              <th scope=\"col\">Owner</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody id=\"productList\">\n              {this.props.products.map((product, key)=>{\n                  return (\n                      // each needs a unique key so that react knows how many there are\n                    <tr key={key}>\n                      <th scope=\"row\">{product.id.toString()}</th>\n                      <td>{product.name}</td>\n                      <td>{window.web3.utils.fromWei(product.price.toString(), 'Ether')/*product.price.toString()*/} Eth</td>\n                      <td>{product.owner}</td>\n                      <td>\n                        { ! product.purchased\n                          ? <button \n                              name = {product.id}\n                              value = {product.price}\n                              onClick={(event) => {\n                                this.props.purchaseProduct(event.target.name, event.target.value)\n                              } }\n                            >\n                             Buy\n                            </button>\n                        : null\n                        }\n                      </td>\n                  </tr>\n                  )\n              })}\n          </tbody>\n        </table>\n      </div>\n        \n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport logo from '../logo.png';\nimport './App.css';\nimport Marketplace from '../abis/Marketplace.json';\nimport Navbar from './Navbar.js';\nimport Main from './Main.js';\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3(){\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    // only for old browsers\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    const networkId = await web3.eth.net.getId()\n    const networkData = Marketplace.networks[networkId]\n    if (networkData){\n      const abi = Marketplace.abi\n      const address = Marketplace.networks[networkId].address\n      const marketplace = new web3.eth.Contract(abi, address)\n\n      // store marketplace in state\n      this.setState({ marketplace })\n      // the methods can be send or call - depending on whether they are only data or transaction\n      const productCount = await marketplace.methods.productCount().call()\n\n      // fetch all products from blockchain\n      this.setState({productCount})\n      for (var i= 1; i <= productCount; i++){\n        const product = await marketplace.methods.products(i).call()\n        this.setState({\n          // adding extra product to array, pretty syntax\n          products: [...this.state.products, product]\n        })\n      }\n\n      this.setState({loading: false})\n\n\n\n\n    } else {\n      window.alert('Contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props){\n    super(props)\n    this.state = {\n      account: '',\n      productCount: 0,\n      products: [],\n      loading: true\n    }\n\n    this.createProduct = this.createProduct.bind(this)\n    this.purchaseProduct = this.purchaseProduct.bind(this)\n\n  }\n\n  createProduct (name, price) {\n    this.setState({ loading: true})\n    this.state.marketplace.methods.createProduct(name, price).send({ from: this.state.account })\n    // promise of receipt after blockchain transaction\n    .once('receipt', (receipt) => {\n      this.setState({loading: false})\n    })\n  }\n\n  purchaseProduct (id, price) {\n    this.setState({ loading: true})\n    this.state.marketplace.methods.purchaseProduct(id).send({ from: this.state.account, value: price})\n    // promise of receipt after blockchain transaction\n    .once('receipt', (receipt) => {\n      this.setState({loading: false})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account}/>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              { this.state.loading \n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div> \n                : <Main \n                   products = {this.state.products}\n                   createProduct = {this.createProduct}\n                   purchaseProduct = {this.purchaseProduct}/>\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}